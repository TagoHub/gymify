.flex-container
  .flex-item-left
    .title 
      %h1.text-center.mt-3.font-bold= @exercise.name
    - if @exercise.image.attached?
      = image_tag url_for(@exercise.image), class: "img-desktop"
  .flex-item-right
    - if @exercise.image.attached?
      = image_tag url_for(@exercise.image), class: "img-mobile img-fluid"
    .flex-row.center
      .show
        .title
          %h1#rest-timer.text-center.mt-3.font-bold 00:00
    .flex-row
      = render 'exercise_sets/play_form'
    .show
      %table
        - if @exercise_set.working_set?
          %tr
            %td.label Rep Range
            %td.value= @exercise_set.rep_range
        - if @exercise.instrument
          %tr
            %td.label Instrument
            %td.value
              - if @exercise.instrument.weight > 0
                = [@exercise.instrument.name, display_number(@exercise.instrument.weight), @exercise.instrument.unit.abbreviation].join(" ")
              - elsif @exercise.hole
                = [@exercise.instrument.name, "-", display_nth(@exercise.hole), "from top"].join(" ")
              - else 
                = @exercise.instrument.name
        - if @exercise.grip && !@exercise.attachment
          %tr
            %td.label Grip
            %td.value
              = @exercise.grip.name
        - if @exercise.attachment
          %tr
            %td.label Attachment
            %td.value
              = @exercise.attachment.name
              - if @exercise.grip
                = [" -", @exercise.grip.name].join(" ")
        - if @exercise.notes.present?
          %tr
            %td.label Notes
            %td.value= @exercise.notes
        - if @exercise_set.next_set && @exercise_set.last_set?
          %tr
            %td.label{ rowspan: 2 } Upcoming
            %td.value= @exercise_set.next_set.exercise.name
          %tr
            %td.value
              = @exercise_set.next_exercise.instrument.name
              = @exercise_set.next_set.load
              %i.bi.bi-arrow-right
              = @exercise_set.next_set.suggested_load
              = @exercise_set.next_set.unit.abbreviation
- last_set = @exercise.exercise_group.exercises.flat_map{ |e| e.working_sets }.select{ |es| es.last_set? }.first 
.show
  = form_with model: last_set, url: program_workout_exercise_exercise_set_path(@program, @workout, last_set.exercise, last_set), method: :patch, local: true, html: { id: last_set.id } do |f|
    = f.hidden_field :play, value: true, id: "play-#{last_set.id}"
    = f.hidden_field :reps, value: last_set.reps, id: "reps-#{last_set.id}"
    = f.hidden_field :load, value: display_number(last_set.load), step: :any, id: "load-#{last_set.id}"
    = f.hidden_field :intensity, value: last_set.intensity, id: "intensity-#{last_set.id}"
    %button.h5{ type: "submit", title: "Skip to next exercise", id: "next-link", class: "btn" } Next Exercise
  %br

:scss

  .show {
    form {
      border: none;

    }
  }

  .flex-row {
    align-items: flex-start;
  }

  .disabled-link {
    opacity: 0.5;
  }

  .show td.label {
    width: 30%;
  }

  .flex-container {
    display: flex;
    flex-direction: column;
  }

  .flex-item-left {
    flex: 1;
    margin: 2%;
    margin-top: 0;
    height: 100vh;
    display: flex;
    justify-content: flex-start;
    align-items: top;
    flex-direction: column;
  }

  .flex-item-right {
    flex: 1;
    margin: 2%;
    margin-top: 0;
    height: 100vh;
    display: flex;
    justify-content: flex-start;
    align-items: top;
    flex-direction: column;
  }

  .img-desktop {
    max-height: 400px;
    max-width: 100%;
    height: auto;
    width: auto;
    display: block;
    margin: 0 auto; // optional: centers the image
    object-fit: contain; // optional, for good scaling in constrained areas
  }

  .img-mobile {
    max-height: 200px;
  }

  @media (min-width: 1200px) {
    .flex-container {
      height: 500px;
      flex-direction: row;
    }
    .img-mobile {
      display: none;
    }
  }

  @media (max-width: 1199.98px) {
    .img-desktop, .desktop {
      display: none;
    }
    .center {
      justify-content: center;
    }
  }

:javascript

  document.addEventListener("turbo:load", () => {
    let unit = "Seconds";
    let time = 0;
    const prevSet = #{!!@prev_set};
    const workingSet = "#{@exercise_set&.set_type}" === "Working Set";
    const prevWorkingSet = #{@prev_set&.working_set? ? "true" : "false"};

    if (prevSet) {
      if (workingSet && prevWorkingSet) {
        time = #{@prev_set&.exercise&.rest_time || 0};
        unit = "#{@prev_set&.exercise&.unit&.name || 'Seconds'}";
      }
    } else {
      time = 1;
    }

    time = time || 30;

    if (unit.toLowerCase() === "minutes") {
      time *= 60;
    }

    const timerEl = document.getElementById("rest-timer");
    if (!timerEl) return;

    const updateTimer = () => {
      if (time <= 0) {
        timerEl.textContent = "GO!";
        timerEl.classList.add("text-danger");
        clearInterval(interval);
        return;
      }

      const minutes = Math.floor(time / 60);
      const seconds = time % 60;
      timerEl.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      time--;
    };

    updateTimer();
    const interval = setInterval(updateTimer, 1000);
  });