- last_set = @exercise.exercise_group.exercises.flat_map{ |e| e.working_sets }.select{ |es| es.last_set? }.first 
.flex-container
  .flex-item-left
    .title 
      %h1.text-center.mt-3.font-bold= @exercise.name
    - if @exercise.image.attached?
      = image_tag url_for(@exercise.image), class: "img-desktop"
  .flex-item-right
    - if @exercise.image.attached?
      .image-wrapper
        = image_tag url_for(@exercise.image), alt: "", class: "exercise-img img-mobile img-fluid", loading: "lazy", data: { behavior: "image-loader" }
        .spinner.hidden
          %i.bi.bi-arrow-repeat
    %div#fixed-timer-bar
      %h1#rest-timer 00:00
      .progress
        .progress-bar.bg-primary{
          role: "progressbar",
          style: "width: #{@progress}%",
          aria: {valuenow: (@progress).round, valuemin: "0", valuemax: "100"}
        }
    .flex-row
      = render 'exercise_sets/play_form'
    .show
      = render 'exercise_sets/exercise_info', exercise_set: @exercise_set, exercise: @exercise, upcoming: false
      - if last_set.next_set
        - upcoming_ex_sets = last_set.next_set.exercise.exercise_group.all_sets.select { |es| es.order == 1 }
        .accordion.accordion-flush.border-top.border-bottom#upcomingAccordion
          - upcoming_ex_sets.each_with_index do |ex_set, index|
            .accordion-item
              %h2.accordion-header{id: "heading-#{index}"}
                %button.accordion-button.collapsed{
                  type: "button",
                  data: { "bs-toggle": "collapse", "bs-target": "#collapse-#{index}" },
                  aria: { expanded: "false", controls: "collapse-#{index}" }
                }
                  = "Upcoming"
                  = " #{index+1}" if upcoming_ex_sets.size > 1
                  = " â€“ #{ex_set.exercise.name}"

              .accordion-collapse.collapse{
                id: "collapse-#{index}",
                aria: { labelledby: "heading-#{index}" },
                data: { "bs-parent": "#upcomingAccordion" }
              }
                .accordion-body
                  = render 'exercise_sets/exercise_info', exercise_set: ex_set, exercise: ex_set.exercise, upcoming: true
.show
  = form_with model: last_set, url: program_workout_exercise_exercise_set_path(@program, @workout, last_set.exercise, last_set), method: :patch, local: true, html: { id: "next" } do |f|
    = f.hidden_field :play, value: true, id: "play-#{last_set.id}"
    = f.hidden_field :reps, value: last_set.reps, id: "reps-#{last_set.id}"
    = f.hidden_field :load, value: display_number(last_set.load), step: :any, id: "load-#{last_set.id}"
    = f.hidden_field :intensity, value: last_set.intensity, id: "intensity-#{last_set.id}"
    %button.h5{ type: "submit", title: "Skip to next exercise", id: "next-link", class: "btn" } Next Exercise
  %br

:scss

  .show {
    form {
      border: none;
    }
    form#next {
      padding: 0;
      margin: 0;
      align-items: center;
      #next-link {
        margin-top: 20px;
        margin-bottom: 20px;
      }
    }
  }

  .flex-row {
    align-items: flex-start;
  }

  .disabled-link {
    opacity: 0.5;
  }

  .show td.label {
    width: 30%;
  }

  .flex-container {
    display: flex;
    flex-direction: column;
  }

  .accordion-body {
    padding: 0;
  }

  #fixed-timer-bar {
    position: sticky;
    top: 0;
    left: 0;
    right: 0;
    margin-top: 5%;
    margin-bottom: 5%;
    z-index: 1050;
    background: rgba(32, 32, 32, 0.85);
    color: #fff;
    text-align: center;
    padding-top: 0.5rem;
    font-size: 1.5rem;
    font-weight: bold;
    box-shadow: 0 2px 6px rgba(0,0,0,0.3);
  }

  .progress {
    background-color: rgba(255, 255, 255, 0);
    border-radius: 0;
    height: 6px;
    width: 100%;
    margin-top: 0.5rem;
    overflow: hidden;

    .progress-bar {
      height: 100%;
      transition: width 0.4s ease;
    }
  }

  .flex-item-left {
    flex: 1;
    margin-top: 0;
    height: 100vh;
    display: flex;
    justify-content: flex-start;
    align-items: top;
    flex-direction: column;
  }

  .flex-item-right {
    flex: 1;
    margin-top: 0;
    height: 100vh;
    display: flex;
    justify-content: flex-start;
    align-items: top;
    flex-direction: column;
  }

  .img-desktop {
    max-height: 400px;
    max-width: 100%;
    height: auto;
    width: auto;
    display: block;
    margin: 0 auto; // optional: centers the image
    object-fit: contain; // optional, for good scaling in constrained areas
  }

  .img-mobile {
    max-height: 200px;
  }

  @media (min-width: 1200px) {
    .flex-container {
      height: 500px;
      flex-direction: row;
    }
    .img-mobile {
      display: none;
    }
  }

  @media (max-width: 1199.98px) {
    .img-desktop, .desktop {
      display: none;
    }
    .center {
      justify-content: center;
    }
  }

  .image-wrapper {
    position: relative;
    height: 200px; // Prevent layout shift
    display: flex;
    align-items: center;
    justify-content: center;

    .exercise-img {
      max-height: 100%;
      max-width: 100%;
      display: none; // Hide until loaded
    }

    .spinner {
      position: absolute;
      font-size: 2rem;
      animation: spin 1s linear infinite;
    }

    .hidden {
      display: none;
    }

    @keyframes spin {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }
  }


:javascript

  document.addEventListener("turbo:load", () => {
    let time = 0;
    const prevSet = #{!!@prev_set};
    const workingSet = "#{@exercise_set&.set_type}" === "Working Set";
    const unilateral = #{@exercise_set&.exercise&.unilateral || false};
    const alternate = #{!!@alternate};
    const prevWorkingSet = #{@prev_set&.working_set? ? "true" : "false"};
    let duration = #{(@exercise_set&.exercise&.unilateral ? @exercise_set&.exercise&.rest_time : @prev_set&.exercise&.rest_time) || 0};
    const unit = "#{@prev_set&.exercise&.unit&.name || 'Seconds'}";
    // Set time based on previous set
    if (prevSet) {
      if (workingSet && prevWorkingSet) {
        time = duration
        // Convert to seconds if rest time is in minutes
        if (unit.toLowerCase() === "minutes") {
          time *= 60;
        }
      }
      // Set time to 30 seconds if warmup set
      else {
        time = 30;
      }
    }
    // Set time to 5 if workout just started
    else {
      time = 5;
    }
    // Reduce time by half for unilateral exercises
    if (unilateral) {
      time /= 2;
    }
    // Select timer element
    const timerEl = document.getElementById("rest-timer");
    if (!timerEl) return;
    // Update timer text and notify user if necessary
    const updateTimer = () => {
      // Notify if rest time is over
      // Play sound has a delay of 0.5 seconds
      if (time === 1) {
        setTimeout(() => {
          playSound();
        }, 500);
      }
      if (time <= 0) {
        if (unilateral) {
          if (alternate) {
            timerEl.innerHTML = `<i class="bi bi-rocket-takeoff text-primary me-2"></i>Do left side!`;
          }
          else {
            timerEl.innerHTML = `<i class="bi bi-rocket-takeoff text-primary me-2"></i>Do right side!`;
          }
        }
        else {
          timerEl.innerHTML = `<i class="bi bi-rocket-takeoff text-primary me-2"></i>Go!`;
        }
        clearInterval(interval);
        return;
      }
      // Change timer text to minutes:seconds format
      const minutes = Math.floor(time / 60);
      const seconds = time % 60;
      timerEl.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      time--;
    };

    updateTimer();
    const interval = setInterval(updateTimer, 1000);
  });

  document.addEventListener("DOMContentLoaded", () => {
    const images = document.querySelectorAll("[data-behavior='image-loader']");

    images.forEach((img) => {
      const wrapper = img.closest(".image-wrapper");
      const spinner = wrapper.querySelector(".spinner");

      img.addEventListener("load", () => {
        img.style.display = "block";
        spinner.classList.add("hidden");
      });
    });
  });
