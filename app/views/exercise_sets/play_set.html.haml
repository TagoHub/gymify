.flex-container
  .flex-item-left
    .title 
      %h1= @exercise.name
    - if @exercise.image.attached?
      = image_tag url_for(@exercise.image), class: "img-desktop"
  .flex-item-right
    //.title 
    //  %h4= [@exercise_set.set_type, @exercise_set.order].join(" #")
    - if @exercise.image.attached?
      = image_tag url_for(@exercise.image), class: "img-mobile img-fluid"
    .show
      .title
        %h1#rest-timer.text-center.mt-3.font-bold 00:00
      %table
        %tr
          %td.label Set
          %td.value= [@exercise_set.set_type, @exercise_set.get_set_type_position].join(" - ")
        - if @exercise_set.intensity_technique
          %tr
            %td.label Intensity Technique
            %td.value= @exercise_set.intensity_technique&.name
        %tr
          %td.label= ["Reps", @exercise_set.suggested_rep_range].join(" ")
          %td.value= @exercise_set.reps
        %tr
          %td.label= "Load (~#{display_number(@exercise_set.suggested_load)} #{@exercise_set.unit.abbreviation})"
          %td.value= [display_number(@exercise_set.load), @exercise_set.unit.abbreviation].join(" ")
        - if @exercise.attachment
          %tr
            %td.label Attachment
            %td.value= @exercise.attachment.name
        - if @exercise.grip
          %tr
            %td.label Grip
            %td.value= @exercise.grip.name
        - if @exercise_set.intensity
          %tr
            %td.label= @exercise_set.suggested_intensity ? "Intensity (~#{@exercise_set.suggested_intensity})" : "Intensity"
            %td.value= @exercise_set.intensity
        - if @exercise.notes.present?
          %tr
            %td.label Notes
            %td.value= @exercise.notes
        - if @exercise_set.next_set && @exercise_set.next_exercise
          %tr
            %td.label Upcoming
            %td.value= @exercise_set.next_exercise.name
      = link_to 'Next', set_play_form_program_workout_exercise_exercise_set_path(@program, @workout, @exercise, @exercise_set), class: "btn disabled-link", id: "next-link", data: { turbo: false }
= render 'exercise_sets/play_preview'

:scss
  .index {
    table {
      width: 60%;
    }
    position: relative;
  }

  .disabled-link {
    opacity: 0.5;
  }

  .show td.label {
    width: 30%;
  }

  .flex-container {
    display: flex;
    flex-direction: column;
  }

  .flex-item-left {
    flex: 2;
    margin: 2%;
    margin-top: 0;
    height: 100vh;
    display: flex;
    justify-content: flex-start;
    align-items: top;
    flex-direction: column;
  }

  .flex-item-right {
    flex: 3;
    margin: 2%;
    margin-top: 0;
    height: 100vh;
    display: flex;
    justify-content: flex-start;
    align-items: top;
    flex-direction: column;
  }

  .img-desktop {
    max-height: 400px;
    max-width: 100%;
    height: auto;
    width: auto;
    display: block;
    margin: 0 auto; // optional: centers the image
    object-fit: contain; // optional, for good scaling in constrained areas
  }

  @media (min-width: 1200px) {
    .flex-container {
      height: 500px;
      flex-direction: row;
    }
    .img-mobile {
      display: none;
    }
  }

  @media (max-width: 1199.98px) {
    .img-desktop {
      display: none;
    }
  }

:javascript

  document.addEventListener("turbo:load", () => {
    let unit = "Seconds";
    let time = 0;
    const prevSet = #{!!@prev_set};
    const workingSet = "#{@exercise_set&.set_type}" === "Working Set";
    const prevWorkingSet = #{@prev_set&.set_type == "Working Set" ? "true" : "false"};

    if (prevSet) {
      if (workingSet && prevWorkingSet) {
        time = #{@prev_set&.exercise&.rest_time || 0};
        unit = "#{@prev_set&.exercise&.unit&.name || 'Seconds'}";
      }
    } else {
      time = 1;
    }

    time = time || 30;

    if (unit.toLowerCase() === "minutes") {
      time *= 60;
    }

    const timerEl = document.getElementById("rest-timer");
    const nextLink = document.getElementById("next-link");

    // Disable the link initially
    if (nextLink) {
      nextLink.classList.add("disabled-link");
    }

    if (!timerEl) return;

    const updateTimer = () => {
      if (time <= 0) {
        timerEl.textContent = "GO!";
        timerEl.classList.add("text-danger");

        // Enable the link
        if (nextLink) {
          nextLink.classList.remove("disabled-link");
        }

        clearInterval(interval);
        return;
      }

      const minutes = Math.floor(time / 60);
      const seconds = time % 60;
      timerEl.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      time--;
    };

    updateTimer();
    const interval = setInterval(updateTimer, 1000);
  });

  document.addEventListener("turbo:load", () => {
    document.addEventListener("keydown", (event) => {
      const nextLink = document.getElementById("next-link");

      if (event.key === "Enter" && nextLink) {
        nextLink.click();
      }
    });
  });