.title 
  %h1= @exercise.name
.title 
  %h4= [@exercise_set.set_type, @exercise_set.order].join(" #")
.title
  %h1#rest-timer.text-center.mt-3.font-bold 00:00
.flex-row
  - if @exercise.image.attached?
    = image_tag url_for(@exercise.image), class: "img-fluid"
.show
  %table
    %tr
      %td.label= "Reps (#{[@exercise.rep_range_min, @exercise.rep_range_max].join(" - ")})"
      %td.value= @exercise_set.reps
    %tr
      %td.label Load
      %td.value= [@exercise_set.load, @exercise_set.unit.abbreviation].join(" ")
    - if @exercise_set.intensity
      %tr
        %td.label Intensity
        %td.value= @exercise_set.intensity
    - if @exercise_set.intensity_technique
      %tr
        %td.label Intensity Technique
        %td.value= @exercise_set.intensity_technique&.name
  = link_to 'Next', set_play_form_program_workout_exercise_exercise_set_path(@program, @workout, @exercise, @exercise_set), class: "btn disabled-link", id: "next-link", data: { turbo: false }

:scss
  .disabled-link {
    //pointer-events: none;
    opacity: 0.5;
  }

  .show td.label {
    width: 50%;
  }

:javascript

  document.addEventListener("turbo:load", () => {
    const unit = "#{@exercise.unit.name}";
    let time = #{@exercise_set.set_type == "Working Set" ? @exercise.rest_time : 30};
    const warmupSet = "#{@exercise_set.set_type}";

    if (time != 30 && unit.toLowerCase() === "minutes") {
      time *= 60;
    }

    const timerEl = document.getElementById("rest-timer");
    const nextLink = document.getElementById("next-link");

    // Disable the link initially
    if (nextLink) {
      nextLink.classList.add("disabled-link");
    }

    if (!timerEl) return;

    const updateTimer = () => {
      if (time <= 0) {
        timerEl.textContent = "GO!";
        timerEl.classList.add("text-danger");

        // Enable the link
        if (nextLink) {
          nextLink.classList.remove("disabled-link");
        }

        clearInterval(interval);
        return;
      }

      const minutes = Math.floor(time / 60);
      const seconds = time % 60;
      timerEl.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      time--;
    };

    updateTimer();
    const interval = setInterval(updateTimer, 1000);
  });